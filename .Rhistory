dat[education %in% level1] = "Less than Highschool"
dat = cbind(df)
dat = cbind(df)
dat[education %in% level1,] = "Less than highschool"
dat = cbind(df)
dat$education = as.character(dat$education)
level1 = c(" 1st-4th", " 5th-6th", " 7th-8th")
names(dat)
dat[,education := ifelse(education %in% level1, "Less than highschool",education)]
unique(dat$education)
combine_education = function(dat){
dat$education = as.character(dat$education)
level1 = c(" Preschool"," 1st-4th", " 5th-6th", " 7th-8th")
dat[,education := ifelse(education %in% level1, "Less than highschool",education)]
level2 = c(" 9th", " 10th", " 11th", " 12th")
dat[,education := ifelse(education %in% level2, "HS with degree",education)]
dat[,education := ifelse(education == " HS-grad", "HS degree",education)]
level3 = c(" Assoc-acdm"," Assoc-voc")
dat[,education := ifelse(education %in% level3, "Associate degree",education)]
}
df_feat =  combine_education(df)
combine_education = function(dat){
dat$education = as.character(dat$education)
level1 = c(" Preschool"," 1st-4th", " 5th-6th", " 7th-8th")
dat[,education := ifelse(education %in% level1, "Less than highschool",education)]
level2 = c(" 9th", " 10th", " 11th", " 12th")
dat[,education := ifelse(education %in% level2, "HS with degree",education)]
dat[,education := ifelse(education == " HS-grad", "HS degree",education)]
level3 = c(" Assoc-acdm"," Assoc-voc")
dat[,education := ifelse(education %in% level3, "Associate degree",education)]
return (dat)
}
df_feat =  combine_education(df)
View(df_feat)
unique(df_feat$education)
ggplot(df, aes(x = education, fill = income)) + geom_col()
ggplot(df, aes(x = education, fill = income, y = count)) + geom_col()
t = table(df_feat$education, df_feat$income)
t
hist(t)
edu_income = table(df_feat$education, df$income)
rownames(edu_income)
names(edu_income)
colnames(edu_income)
edu_income = data.table(Degree = rownames(edu_income), Less_50k = edu_income$` <=50K`, More_50k = edu_income$` >50K`)
class(edu_income)
edu_income[,1]
edu_income = data.table(Degree = rownames(edu_income), Less_50k = edu_income[,1], More_50k = edu_income[,2])
edu_income
edu_income = t(edu_income)
edu_income
df_feat =  combine_education(df)
edu_income = table(df_feat$education, df$income)
edu_income = data.table(Degree = rownames(edu_income), Less_50k = edu_income[,1], More_50k = edu_income[,2])
edu_income = melt(edu_income, id.vars = "Degree", measure.vars = 2:3)
head(edu_income)
ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income")
degree
dat = cbind(df_feat)
unique(dat$education)
ombine_education = function(dat){
dat$education = as.character(dat$education)
level1 = c(" Preschool"," 1st-4th", " 5th-6th", " 7th-8th")
dat[,education := ifelse(education %in% level1, "Less than highschool",education)]
level2 = c(" 9th", " 10th", " 11th", " 12th")
dat[,education := ifelse(education %in% level2, "HS with no degree",education)]
dat[,education := ifelse(education == " HS-grad", "HS degree",education)]
level3 = c(" Assoc-acdm"," Assoc-voc")
dat[,education := ifelse(education %in% level3, "Associate degree",education)]
return (dat)
}
df_feat =  combine_education(df)
combine_education = function(dat){
dat$education = as.character(dat$education)
level1 = c(" Preschool"," 1st-4th", " 5th-6th", " 7th-8th")
dat[,education := ifelse(education %in% level1, "Less than highschool",education)]
level2 = c(" 9th", " 10th", " 11th", " 12th")
dat[,education := ifelse(education %in% level2, "HS with no degree",education)]
dat[,education := ifelse(education == " HS-grad", "HS degree",education)]
level3 = c(" Assoc-acdm"," Assoc-voc")
dat[,education := ifelse(education %in% level3, "Associate degree",education)]
return (dat)
}
df_feat =  combine_education(df)
edu_income = table(df_feat$education, df$income)
edu_income = data.table(Degree = rownames(edu_income), Less_50k = edu_income[,1], More_50k = edu_income[,2])
edu_income = melt(edu_income, id.vars = "Degree", measure.vars = 2:3)
ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income")
dat = cbind(df_feat)
unique(dat$education)
combine_education = function(dat){
dat$education = as.character(dat$education)
level1 = c(" Preschool"," 1st-4th", " 5th-6th", " 7th-8th")
dat[,education := ifelse(education %in% level1, "Less than highschool",education)]
level2 = c(" 9th", " 10th", " 11th", " 12th")
dat[,education := ifelse(education %in% level2, "HS with no degree",education)]
dat[,education := ifelse(education == " HS-grad", "HS degree",education)]
level3 = c(" Assoc-acdm"," Assoc-voc")
dat[,education := ifelse(education %in% level3, "Associate degree",education)]
level4 = c(" Prof-school", " Doctorate")
dat[,education := ifelse(education %in% level4, "Doctorate or Professional degree",education)]
return (dat)
}
df_feat =  combine_education(df)
edu_income = table(df_feat$education, df$income)
edu_income = data.table(Degree = rownames(edu_income), Less_50k = edu_income[,1], More_50k = edu_income[,2])
edu_income = melt(edu_income, id.vars = "Degree", measure.vars = 2:3)
ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income")
mean(c(78002,  78157))
dat = cbind(df_feat)
unique(dat$education)
combine_education = function(dat){
dat$education = as.character(dat$education)
level1 = c(" Preschool"," 1st-4th", " 5th-6th", " 7th-8th")
dat[,education := ifelse(education %in% level1, "Less than highschool",education)]
level2 = c(" 9th", " 10th", " 11th", " 12th")
dat[,education := ifelse(education %in% level2, "HS with no degree",education)]
dat[,education := ifelse(education == " HS-grad", "HS",education)]
level3 = c(" Assoc-acdm"," Assoc-voc")
dat[,education := ifelse(education %in% level3, "Associate",education)]
level4 = c(" Prof-school", " Doctorate")
dat[,education := ifelse(education %in% level4, "Doctorate or Professional",education)]
return (dat)
}
df_feat =  combine_education(df)
edu_income = table(df_feat$education, df$income)
edu_income = data.table(Degree = rownames(edu_income), Less_50k = edu_income[,1], More_50k = edu_income[,2])
edu_income = melt(edu_income, id.vars = "Degree", measure.vars = 2:3)
ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income")
dat = merge(dat, degree_median_income, by = "education")
education_median = function(dat){
degree = unique(dat$education)
degree_median_income = data.frame(education = degree,
Mean-income = c(52370,30071, 17543,61045,35879,40258, 14275,78079))
education_median = function(dat){
degree = unique(dat$education)
degree_median_income = data.frame(education = degree,
Mean-income = c(52370,30071,17543,61045,35879,40258,14275,78079))
degree = unique(dat$education)
degree_median_income = data.frame(education = degree,
Mean-income = c(52370,30071,17543,61045,35879,40258,14275,78079))
degree_median_income = data.frame(education = degree,
Mean_income = c(52370,30071,17543,61045,35879,40258,14275,78079))
education_median = function(dat){
degree = unique(dat$education)
degree_median_income = data.frame(education = degree,
Mean_income = c(52370,30071,17543,61045,35879,40258,14275,78079))
dat = merge(dat, degree_median_income, by = "education")
return (dat)
}
df_feat = education_median(df_feat)
head(df_feat)
combine_education = function(dat){
dat$education = as.character(dat$education)
level1 = c(" Preschool"," 1st-4th", " 5th-6th", " 7th-8th")
dat[,education := ifelse(education %in% level1, "Less than highschool",education)]
level2 = c(" 9th", " 10th", " 11th", " 12th")
dat[,education := ifelse(education %in% level2, "HS with no degree",education)]
dat[,education := ifelse(education == " HS-grad", "HS",education)]
level3 = c(" Assoc-acdm"," Assoc-voc")
dat[,education := ifelse(education %in% level3, "Associate",education)]
level4 = c(" Prof-school", " Doctorate")
dat[,education := ifelse(education %in% level4, "Doctorate or Professional",education)]
return (dat)
}
df_feat =  combine_education(df)
edu_income = table(df_feat$education, df$income)
edu_income = data.table(Degree = rownames(edu_income), Less_50k = edu_income[,1], More_50k = edu_income[,2])
edu_income = melt(edu_income, id.vars = "Degree", measure.vars = 2:3)
ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income")
education_median = function(dat){
degree = unique(dat$education)
degree_median_income = data.frame(education = degree,
Edu_Mean_income = c(52370,30071,17543,61045,35879,40258,14275,78079))
dat = merge(dat, degree_median_income, by = "education")
return (dat)
}
df_feat = education_median(df_feat)
head(df_feat)
nlevels(df$native_country)
length(unique(df$native_country))
names(df)
sum(df$`hour-per-week` == 99)
nrow(df)
table(df$`hour-per-week`)
t = df[`hour-per-week` >= 55,]
table(t$`hour-per-week`, t$income)
View(t)
View(table(t$`hour-per-week`, t$income))
table(t$`martial-status`, t$`hour-per-week`)
table(df$`martial-status`, df$`hour-per-week`)
names(df)
t = df[, c("sex", "martial-status", "income")]
View(t)
table(t$sex, t$`martial-status`, t$income)
plot(table(t$sex, t$`martial-status`, t$income))
plot(table(t$sex, t$`martial-status`, t$income), ces = 5.5)
plot(table(t$sex, t$`martial-status`, t$income), ces = 0.5)
plot(table(t$sex, t$`martial-status`, t$income), cex = 0.5)
plot(table(t$sex, t$`martial-status`, t$income), cex = 0.2)
plot(table(t$sex, t$`martial-status`, t$income), cex = 0.35)
plot(table(t$sex, t$`martial-status`, t$income), cex = 0.35, side =2)
plot(table(t$sex, t$`martial-status`, t$income), cex = 0.35, las =1)
table(t$sex, t$`martial-status`
)
names(df)
range(df$age)
seq(24,90, 10)
cut(df_feat$age, c(seq(24,74, 10), 90)
)
cut(df_feat$age, c(seq(17,24,74, 10), 90)
)
cut(df_feat$age, c(seq(14,74, 10), 90))
cut(df_feat$age, c(seq(14,74, 10), 90), labels =  T)
cut(df_feat$age, c(seq(14,74, 10), 90), labels = seq("a", "g"))
cut(df_feat$age, c(seq(14,74, 10), 90), labels = 1:7)
df_feat$age = cut(df_feat$age, c(seq(14,74, 10), 90), labels = 1:7)
View(df_feat)
df_feat$age = as.factor(df_feat$age)
unique(df_feat$race)
table(df_feat$race, df_feat$income)
dat = cbind(df_feat)
race = unique(dat$race)
race
dat$race = as.character(dat$race)
race = unique(dat$race)
race
table(df_feat$age, df$`hour-per-week`)
plot(table(t$sex, t$`martial-status`, t$income), cex = 0.35, side =2)
plot(table(df_feat$race, df_feat$age, df_feat$income), las =1)
plot(table(df_feat$race, df_feat$sex, df_feat$income), las =1)
plot(table(df_feat$sex,df_feat$race,df_feat$income), las =1)
plot(table(df_feat$sex,df_feat$race,df_feat$income), las =1, title = "Cross ratio between Gender, Ethicity, and Income")
plot(table(df_feat$sex,df_feat$race,df_feat$income), las =1, main = "Cross ratio between Gender, Ethicity, and Income")
able(df_feat$sex,df_feat$race,df_feat$income
)
table(df_feat$sex,df_feat$race,df_feat$income)
unique(dat$race)
t1 = unique(dat$race)
t2 = unique(dat$sex)
t(t1)%*% t2
unique(dat$sex)
sex = as.character(dat$sex)
nmin = min(table(ytrain_origin))
rm(list = ls())
library(rpart)
library(randomForest)
library(data.table)
library(caret)
library(doParallel)
library(plotROC)
library(dplyr)
library(purrr)
library(pROC)
#############################################################
dir = "/Users/MyDinh/Downloads/Stat154/Stat154Project/"
setwd(dir)
set.seed(123)
df_impute = readRDS("data/df_impute_feat.rds")
df_impute = data.table(df_impute)
#saveRDS(df_impute,"data/df_impute_feat.rds")
n = ceiling(nrow(df_impute) * 0.8)
#############################################################
# Prepocessing data:
#############################################################
train_idx = sample(nrow(df_impute),n)
train_origin = df_impute[train_idx,]
test_origin = df_impute[-train_idx, ]
xtrain_origin  = train_origin[,-c("income")]
ytrain_origin = train_origin$income
xtest_origin  = test_origin[,-c("income")]
ytest_origin = test_origin$income
(1/table(ytrain_origin)[1]) * 0.5,
(1/table(ytrain_origin)[2]) * 0.5)
ctrol8 = trainControl(method = "cv", number =5,
summaryFunction = twoClassSummary,
classProbs = T)
# with weights
model_weights = ifelse(ytrain_origin == "Less.50k",
(1/table(ytrain_origin)[1]) * 0.5,
(1/table(ytrain_origin)[2]) * 0.5)
ctrol8 = trainControl(method = "cv", number =5,
summaryFunction = twoClassSummary,
classProbs = T)
nmin = min(table(ytrain_origin))
nmin = min(table(ytrain_origin))
weighted_down_fit = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=ctrol8,
strata = ytrain_origin,
sampsize = rep(nmin, 2), metric = "ROC",
weights = model_weights)
weighted_down_fit
pred = predict(weighted_down_fit, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
nmin = min(table(ytrain_origin))
weighted_down_fit2 = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=ctrol8,
strata = ytrain_origin,
sampsize = rep(1000, 1000), metric = "ROC",
replace = F,
weights = model_weights)
ctrol8 = trainControl(method = "cv", number =5,
summaryFunction = twoClassSummary,
classProbs = T)
weighted_down_fit2 = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=ctrol8,
strata = ytrain_origin,
sampsize = rep(1000, 1000), metric = "ROC",
replace = F,
weights = model_weights)
weighted_down_fit2 = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=ctrol8,
strata = ytrain_origin,
sampsize = rep(500, 500), metric = "ROC",
replace = F,
weights = model_weights)
nmin = min(table(ytrain_origin))
weighted_down_fit2 = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=ctrol8,
strata = ytrain_origin,
sampsize = rep(100, 100), metric = "ROC",
replace = F,
weights = model_weights)
nmin = min(table(ytrain_origin))
weighted_down_fit2 = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=ctrol8,
strata = ytrain_origin,
sampsize = rep(50, 50), metric = "ROC",
replace = F,
weights = model_weights)
weighted_down_fit2 = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=ctrol8,
strata = ytrain_origin,
metric = "ROC",
replace = F,
weights = model_weights)
weighted_down_fit
pred = predict(weighted_down_fit2, xtest_origin)
pred = predict(weighted_down_fit2, xtest_origin)
weighted_down_fit2 = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=ctrol8,
strata = ytrain_origin,
metric = "ROC",
replace = F,
weights = model_weights)
weighted_down_fit2
pred = predict(weighted_down_fit2, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
weighted_down_fit2
nmax  = max(table(ytrain_origin))
weighted_up_fit = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15,
trControl=ctrol8,
strata = ytrain_origin,
sampsize = c(8000,8000), metric = "ROC",
weights = model_weights)
weighted_up_fit = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15,
trControl=ctrol8,
strata = ytrain_origin,
sampsize = rep(nmax, 2), metric = "ROC",
weights = model_weights)
ctrol8$sampling = "smote"
weighted_smote_fit = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15,
trControl=ctrol8,
strata = ytrain_origin,
metric = "ROC",
weights = model_weights)
library(grid)
ctrol8$sampling = "smote"
weighted_smote_fit = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15,
trControl=ctrol8,
strata = ytrain_origin,
metric = "ROC",
weights = model_weights)
weighted_smote_fit
pred = predict(weighted_smote_fit, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
model_list4 = list(weighted = weighted_fit,
weighted_strata = weighted_strata,
down_weight = weighted_down_fit,
down_wight_wt_rp = weighted_down_fit2,
SMOTE_weight = weighted_smote_fit)
weighted_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F,
weights = model_weights,
metric = "ROC",
trControl = ctrol8)
pred = predict(weighted_fit, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
set.seed(123)
library(data.table)
library(ggplot2)
library(GGally)
library(corrgram)
library(tidyr)
library(dplyr)
library(corrplot)
library(factoextra)
library(FactoMineR)
set.seed(123)
df = read.csv('/Users/MyDinh/mdinh6_data-x-f17/Project/data_final_final.csv')
df = data.table(df)
summary(df)
table(ytrain_origin)
table(ytest_origin)
df_impute = readRDS("data/df_impute_feat.rds")
df_impute = data.table(df_impute)
split1 = createDataPartition(df_impute$income, p  = 0.8)[[1]]
train_origin = df_impute[split1,]
test_origin = df_impute[-split1, ]
xtrain_origin = train_origin[, -c("income")]
ytrain_origin = train_origin$income
xtest_origin = test_origin[,-c("income")]
ytest_origin = test_origin$income
table(ytest_origin)
table(ytrain_origin)
split1 = createDataPartition(df_impute$income, p  = 0.8)[[1]]
?createDataPartition
table(ytrain_origin)/nrow(ytrain_origin) * 100
table(ytrain_origin)/nrow(ytrain_origin)
n = ceiling(nrow(df_impute) * 0.8)
#############################################################
# Prepocessing data:
#############################################################
train_idx = sample(nrow(df_impute),n)
train_origin = df_impute[train_idx,]
test_origin = df_impute[-train_idx, ]
xtrain_origin  = train_origin[,-c("income")]
ytrain_origin = train_origin$income
xtest_origin  = test_origin[,-c("income")]
ytest_origin = test_origin$income
table(ytrain_origin)
table(ytest_origin)
split1 = createDataPartition(df_impute$income, p  = 0.8)[[1]]
train_origin = df_impute[split1,]
test_origin = df_impute[-split1, ]
xtrain_origin = train_origin[, -c("income")]
ytrain_origin = train_origin$income
xtest_origin = test_origin[,-c("income")]
ytest_origin = test_origin$income
control = trainControl(method = "cv", number = 5)
rf_default  = train(x = xtrain_origin, y = ytrain_origin,
method = "rf", trControl = control,
importance= T, ntree = 100, replace= F)
rf_default
pred = predict(rf_default, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
varImp(rf_default)
rf_default  = train(x = xtrain_origin, y = ytrain_origin,
method = "rf", trControl = control,
importance= T, ntree = 100)
rf_d
rf_default
pred = predict(rf_default, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
varImp(rf_default)
ctrol = trainControl(method = "cv", number =5,
verboseIter = F,
sampling = "down")
model_rf_under = train(xtrain_origin, ytrain_origin, method = "parRF",
trControl = ctrol)
install.packages("foreach")
install.packages("foreach")
install.packages("import")
install.packages("import")
library(import)
model_rf_under = train(xtrain_origin, ytrain_origin, method = "parRF",
trControl = ctrol)
library(caret)
library(rpart)
library(randomForest)
library(data.table)
library(caret)
library(doParallel)
library(plotROC)
library(dplyr)
library(purrr)
library(pROC)
ctrol = trainControl(method = "cv", number =5,
verboseIter = F,
sampling = "down")
model_rf_under = train(xtrain_origin, ytrain_origin, method = "parRF",
trControl = ctrol)
cl = makeCluster(detectCores()-1)
registerDoParallel(cl)
model_rf_under = train(xtrain_origin, ytrain_origin, method = "parRF",
trControl = ctrol)
stopCluster(cl)
model_rf_under = train(xtrain_origin, ytrain_origin, method = "RF",
trControl = ctrol)
model_rf_under = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol)
model_rf_under = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol)
