"native_country","income")
df <- as.data.frame(df)
df_cont = df[, c(1,3, 5, 11:13,15)]
df_cat = df[, -c(1,3, 5, 11:13)]
par(mfrow=c(1,1))
names = colnames(df_cont)
for (i in 1:(ncol(df_cont)-1)) {
print(paste("Summary table for income over", names[i]))
df_plot = data.frame(x= df_cont[[i]], income = df_cont$income)
print(tapply(df_plot$x, df_plot$income, summary))
g1 = ggplot(df_plot, aes(x = x, fill = income)) +
geom_histogram() +
facet_grid(~income) + theme_bw() +
labs(x= names[i])
print(g1)
}
#Libraries called:
library(data.table)
library(ggplot2)
library(ggforce)
install.packages("ggforce")
df_cont = df[, c(1,3, 5, 11:13,15)]
df_cat = df[, -c(1,3, 5, 11:13)]
par(mfrow=c(1,1))
names = colnames(df_cont)
for (i in 1:(ncol(df_cont)-1)) {
print(paste("Summary table for income over", names[i]))
df_plot = data.frame(x= df_cont[[i]], income = df_cont$income)
print(tapply(df_plot$x, df_plot$income, summary))
g1 = ggplot(df_plot, aes(x = x, fill = income)) +
geom_histogram() +
facet_grid(~income) + theme_bw() +
labs(x= names[i])
print(g1)
}
#Libraries called:
library(data.table)
library(ggplot2)
library(ggforce)
library(GGally)
library(car)
library(nortest)
g1
ggsave(g1, device = "png")
ggsave(g1, device = "pdf")
names[i]
getwd()
df_cont = df[, c(1,3, 5, 11:13,15)]
df_cat = df[, -c(1,3, 5, 11:13)]
par(mfrow=c(1,1))
names = colnames(df_cont)
for (i in 1:(ncol(df_cont)-1)) {
print(paste("Summary table for income over", names[i]))
df_plot = data.frame(x= df_cont[[i]], income = df_cont$income)
print(tapply(df_plot$x, df_plot$income, summary))
g1 = ggplot(df_plot, aes(x = x, fill = income)) +
geom_histogram() +
facet_grid(~income) + theme_bw() +
labs(x= names[i])
print(g1)
ggsave(filename = paste0("image/Prepocessing/",names[i], "vsinc.pdf"), plot = g1)
}
for (i in 1:(ncol(df_cont)-1)) {
print(paste("Summary table for income over", names[i]))
df_plot = data.frame(x= df_cont[[i]], income = df_cont$income)
print(tapply(df_plot$x, df_plot$income, summary))
g1 = ggplot(df_plot, aes(x = x, fill = income)) +
geom_histogram() +
facet_grid(~income) + theme_bw() +
labs(x= names[i])
print(g1)
ggsave(filename = paste0("image/Prepocessing/",names[i], "vsinc.png"), plot = g1,width=6, height=4,dpi=300)
}
knitr:Users/MyDinh/Downloads/Stat154/Stat154Project/Image/Prepocessing/capital-gainvsinc.png)
knitr::include_graphics(Users/MyDinh/Downloads/Stat154/Stat154Project/Image/Prepocessing/capital-gainvsinc.png)
getwd()
knitr::include_graphics('./Image/Prepocessing/capital-gainvsinc.png')
g = ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income", title = "Degree vs income") +
theme(axis.text.x = element_text(angle = 85, hjust =1))
combine_education = function(dat){
dat <- data.table(dat)
dat$education = as.character(dat$education)
level1 = c(" Preschool"," 1st-4th", " 5th-6th", " 7th-8th")
dat[,education := ifelse(education %in% level1, "Less than highschool",education)]
level2 = c(" 9th", " 10th", " 11th", " 12th")
dat[,education := ifelse(education %in% level2, "HS with no degree",education)]
dat[,education := ifelse(education == " HS-grad", "HS",education)]
level3 = c(" Assoc-acdm"," Assoc-voc")
dat[,education := ifelse(education %in% level3, "Associate",education)]
level4 = c(" Prof-school", " Doctorate")
dat[,education := ifelse(education %in% level4, "Doctorate or Professional",education)]
return (dat)
}
df_feat =  combine_education(df)
edu_income = table(df_feat$education, df$income)
edu_income = data.table(Degree = rownames(edu_income), Less_50k = edu_income[,1], More_50k = edu_income[,2])
edu_income = melt(edu_income, id.vars = "Degree", measure.vars = 2:3)
g = ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income", title = "Degree vs income") +
theme(axis.text.x = element_text(angle = 85, hjust =1))
ggsave(filename = "image/Prepocessing/degreevsinc.png", g)
g
g = ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income", title = "Degree vs Income") +
theme(axis.text.x = element_text(angle = 90, hjust =1),
axis.text = element_text(size = 15))
g
g = ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income", title = "Degree vs Income") +
theme(axis.text.x = element_text(angle = 90, hjust =1),
axis.text = element_text(size = 4))
g
g = ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income", title = "Degree vs Income") +
theme(axis.text.x = element_text(angle = 90, hjust =1),
axis.text = element_text(size =7))
g
g = ggplot(edu_income, aes(factor(Degree), value, fill = variable)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") +
labs(x = "Degree",y = "Income", title = "Degree vs Income") +
theme(axis.text.x = element_text(angle = 90, hjust =1),
axis.text = element_text(size =9))
g
ggsave(filename = "image/Prepocessing/degreevsinc.png", g)
levels(df_cat$race)
View(edu_income)
models = c("Baseline", "Removed Missing Values with Feature Eng.", "Imputed Missing Values w/t Feature Eng.", "Imputed Missing Values w Feature Eng.")
81/(81+252)
9644/(9644+23)
442/(25+442)
459/(459+22)
462/(462+32)
459+22
462+32
1317/(1317+741)
4203/(4203+251)
459/(459+22)
1052/(1052+4529)
4529/(4529+22)
462/(462+32)
1065/(1065+4473)
4473/(4473+32)
442/(442+25)
1111/(1111+4934)
4934/(4934+25)
977/(977+310)
591/(591+4634)
4634/(4634+310)
models = c("Baseline", "Removed Missing Values with Feature Eng.", "Imputed Missing Values w/t Feature Eng.", "Imputed Missing Values w Feature Eng.")
accuracy = c("81.7%", "82.8%", "82.7%", "86%")
tpr = c("95.4%","93.5%","94.6%","75.9%")
fpr = c("18.8%", "19.2%","18.3%","11.3%")
spec = c("99.5%","99.2%", "99.4%","93.7")
tab = cbind(models, accuracy, tpr, fpr, spec)
tab
tab = data.table(cbind(models, accuracy, tpr, fpr, spec))
tab
tab
t(tab)
tab = data.table(rbind(models, accuracy, tpr, fpr, spec))
tab
tab
tab = data.frame(rbind(models, accuracy, tpr, fpr, spec))
tab
tab
tab = data.frame(rbind(accuracy, tpr, fpr, spec))
colnames(tab) = models
tab
top_ten = readRDS("toptenfeat.rds")
library(rpart)
library(randomForest)
library(data.table)
library(caret)
library(doParallel)
library(plotROC)
library(dplyr)
library(purrr)
library(pROC)
library(grid)
xtrain_origin = readRDS("data/train.rds")
xtrain_origin = train_origin[,-c("income")]
ytrain_origin = train_origin$income
train_origin = readRDS("data/train.rds")
xtrain_origin = train_origin[,-c("income")]
ytrain_origin = train_origin$income
ctrol4 = trainControl(method = "cv", number =5,
verboseIter = F,
sampling = "smote")
model_rf_smote = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol4)
df_imp =  varImp(model_rf_smote)
df_imp =  varImp(model_rf_smote)$importance
df_imp
top_ten = readRDS("data/toptenfeat.rds")
df_im = data.table(top_ten)
df_im = data.frame(feature = rownames(varImp(model_rf_smote)$importance), score = varImp(model_rf_smote)$importance)
df_im
df_im[order(df_im$Overall), ]
df_im[order(-df_im$Overall), ]
df_im
df_im = df_im[order(-df_im$Overall), ]
df_im$feature[1:10]
cbind(df_im$feature[1:10], top_ten)
cbind(df_im$feature[1:10], top_ten[1:10])
df_im
df_im$feature
top_ten
varImp(model_rf_smote)
varImpPlot(model_rf_smote)
t = varImp(model_rf_smote)
plot(t)
control5 = trainControl(method = "cv", number = 5, search = "random",allowParallel = TRUE,
summaryFunction = twoClassSummary,
classProbs = T)
control5
control5$sampling
control5$sampling = "smote"
rf_random = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC", tuneLength = 2:10,
trControl = control5)
###rf_random results:
pred = predict(rf_random, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
df_im = data.frame(feature = rownames(varImp(model_rf_smote)$importance), score = varImp(model_rf_smote)$importance)
df_im = df_im[order(df_im$Overall), ]
top_ten2 = df_im$feature[1:10]
top_ten2
top_ten
top_ten2 = as.character(df_im$feature[1:10], "income")
plot(varImp(rf_random))
df_im = data.frame(feature = rownames(varImp(rf_random)$importance), score = varImp(model_rf_smote)$importance)
df_im = df_im[order(df_im$Overall), ]
top_ten2 = as.character(df_im$feature[1:10], "income")
top_ten2
df_im = data.frame(feature = rownames(varImp(rf_random)$importance), score = varImp(rf_random)$importance)
df_im = data.frame(feature = rownames(varImp(rf_random)$importance), score = varImp(rf_random)$importance)
df_im = df_im[order(df_im$Overall), ]
top_ten2 = as.character(df_im$feature[1:10], "income")
top_ten2
df_im = data.frame(feature = rownames(varImp(model_rf_smote)$importance), score = varImp(model_rf_smote)$importance)
df_im = df_im[order(df_im$Overall), ]
top_ten2 = as.character(df_im$feature[1:10], "income")
top_ten2
plot(varImp(model_rf_smote))
df_im = data.frame(feature = rownames(varImp(model_rf_smote)$importance), score = varImp(model_rf_smote)$importance)
df_im = df_im[order(-df_im$Overall), ]
top_ten2 = as.character(df_im$feature[1:10], "income")
top_ten2
df_im = data.frame(feature = rownames(varImp(rf_random)$importance), score = varImp(rf_random)$importance)
df_im = df_im[order(-df_im$Overall), ]
top_ten2 = as.character(df_im$feature[1:10], "income")
top_ten2
top_ten
plot(varImp(rf_random))
df_im = data.frame(feature = rownames(varImp(model_rf_smote)$importance), score = varImp(model_rf_smote)$importance)
df_im = df_im[order(-df_im$Overall), ]
top_ten2 = as.character(df_im$feature[1:10], "income")
saveRDS(top_ten2, "topten2.rds")
library(rpart)
library(randomForest)
library(data.table)
library(caret)
library(doParallel)
library(plotROC)
library(dplyr)
library(purrr)
library(pROC)
library(grid)
dir = "/Users/MyDinh/Downloads/Stat154/Stat154Project/"
train_origin = readRDS("data/train.rds")
xtrain_origin = train_origin[,-c("income")]
ytrain_origin = train_origin$income
auprcSummary <- function(data, lev = NULL, model = NULL){
index_class2 <- data$income == "More.50k"
index_class1 <- data$income == "Less.50k"
the_curve <- pr.curve(data$income[index_class2],
data$income[index_class1],
curve = FALSE)
out <- the_curve$auc.integral
names(out) <- "AUPRC"
out
}
#########################################
# Use ROC metric
#########################################
# stratified sample with ROC
####
control5 = trainControl(method = "cv", number = 5, search = "random",allowParallel = TRUE,
summaryFunction = auprcSummary,
classProbs = T)
rf_strata = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=control5,
strata = ytrain_origin, sampsize = c(50,50),
metric = "ROC")
pred = predict(rf_strata, xtest_origin)
confusionMatrix(pred, ytest_origin, positive = "More.50k")
# with down sample + ROC
control5$sampling = "down"
down_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",
trControl = control5)
pred2 = predict(down_fit, xtest_origin)
confusionMatrix(pred2, ytest_origin, positive = "More.50k")
# Prediction Less.50k More.50k
# Less.50k     4288      656
# More.50k       64     1504
############################
# up sample with roc
control5$sampling = "up"
up_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",
trControl = control5)
pred3 = predict(up_fit, xtest_origin)
confusionMatrix(pred2, ytest_origin, positive = "More.50k")
# Prediction Less.50k More.50k
# Less.50k     4847       97
# More.50k      100     1468
############################
# smote sample with roc
control5$sampling = "smote"
smote_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",
trControl = control5)
pred = predict(smote_fit, xtest_origin)
confusionMatrix(pred, ytest_origin, positive = "More.50k")
library(rpart)
library(randomForest)
library(data.table)
library(caret)
library(doParallel)
library(plotROC)
library(dplyr)
library(purrr)
library(pROC)
library(grid)
install.packages("PRROC")
library(PRROC)
auprcSummary <- function(data, lev = NULL, model = NULL){
index_class2 <- data$income == "More.50k"
index_class1 <- data$income == "Less.50k"
the_curve <- pr.curve(data$income[index_class2],
data$income[index_class1],
curve = FALSE)
out <- the_curve$auc.integral
names(out) <- "AUPRC"
out
}
#########################################
# Use ROC metric
#########################################
# stratified sample with ROC
####
control5 = trainControl(method = "cv", number = 5, search = "random",allowParallel = TRUE,
summaryFunction = auprcSummary,
classProbs = T)
rf_strata = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=control5,
strata = ytrain_origin, sampsize = c(50,50),
metric = "ROC")
pred = predict(rf_strata, xtest_origin)
confusionMatrix(pred, ytest_origin, positive = "More.50k")
# with down sample + ROC
control5$sampling = "down"
down_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",
trControl = control5)
pred2 = predict(down_fit, xtest_origin)
confusionMatrix(pred2, ytest_origin, positive = "More.50k")
# Prediction Less.50k More.50k
# Less.50k     4288      656
# More.50k       64     1504
############################
# up sample with roc
control5$sampling = "up"
up_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",
trControl = control5)
pred3 = predict(up_fit, xtest_origin)
confusionMatrix(pred2, ytest_origin, positive = "More.50k")
# Prediction Less.50k More.50k
# Less.50k     4847       97
# More.50k      100     1468
############################
# smote sample with roc
control5$sampling = "smote"
smote_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",
trControl = control5)
pred = predict(smote_fit, xtest_origin)
confusionMatrix(pred, ytest_origin, positive = "More.50k")
model_list_roc_samp = list(baseline = rf_default,
under_sampling_w_roc = down_fit,
over_sampling_w_roc= up_fit,
smote_sampling_w_roc = smote_fit,
stratified_50_sampling_w_roc = rf_strata)
control5 = trainControl(method = "cv", number = 5, search = "random",allowParallel = TRUE,
summaryFunction = auprcSummary,
classProbs = T)
rf_strata = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=control5,
strata = ytrain_origin, sampsize = c(50,50),
metric = "ROC")
rf_strata = train(xtrain_origin, ytrain_origin, method = "rf",
tuneLength = 15, trControl=control5,
strata = ytrain_origin, sampsize = c(50,50),
metric = "AUPRC")
rf_strata = train(income~., data = train_origin, method = "rf",
tuneLength = 15, trControl=control5,
strata = ytrain_origin, sampsize = c(50,50),
metric = "AUPRC")
str(train_origin)
library(DMwR)
twoClassSummary()
twoClassSummary
any(train_origin$income == "More.50k")
sum(train_origin$income == "More.50k")
table(train_origin$income)
control5$sampling = "down"
down_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "AUPRC",
trControl = control5)
down_fit = train(income ~., data = train_origin method = "rf",
verbose = F, metric = "AUPRC",
trControl = control5)
down_fit = train(income ~., data = train_origin, method = "rf",
verbose = F, metric = "AUPRC",
trControl = control5)
down_fit = train(income ~., data = train_origin, method = "gbm",
verbose = F, metric = "AUPRC",
trControl = control5)
auprcSummary <- function(data, lev = NULL, model = NULL){
index_class2 <- data$income == "More.50k"
index_class1 <- data$income == "Less.50k"
the_curve <- pr.curve(data$income[index_class2,],
data$income[index_class1,],
curve = FALSE)
out <- the_curve$auc.integral
names(out) <- "AUPRC"
out
}
control5 = trainControl(method = "cv", number = 5, search = "random",allowParallel = TRUE,
summaryFunction = auprcSummary,
classProbs = T)
rf_strata = train(xtrain_origin, ytrain_origin, method = "rf",
trControl=control5,
sampsize = c(50,50),
metric = "AUPRC")
rf_strata = train(income ~ ., data = train_origin, method = "rf",
trControl=control5,
sampsize = c(50,50),
metric = "AUPRC")
head(train_origin)
summaryFunction
summaryFunction
twoClassSummary()
twoClassSummary
down_fit = train(income ~., data = train_origin, method = "rf",
verbose = F, metric = "AUPRC",
trControl = control5)
index_class2 <- data$income == "More.50k"
data = cbind(train_origin)
index_class2 <- data$income == "More.50k"
index_class1 <- data$income == "Less.50k"
the_curve <- pr.curve(data$income[index_class2],
data$income[index_class1],
curve = FALSE)
out <- the_curve$auc.integral
names(out) <- "AUPRC"
out
out
the_curve
out
control5 = trainControl(method = "cv", number = 5,allowParallel = TRUE,
summaryFunction = auprcSummary,
classProbs = T)
auprcSummary <- function(data, lev = NULL, model = NULL){
index_class2 <- data$income == "More.50k"
index_class1 <- data$income == "Less.50k"
the_curve <- pr.curve(data$income[index_class2],
data$income[index_class1],
curve = FALSE)
out <- the_curve$auc.integral
names(out) <- "AUPRC"
out
}
control5 = trainControl(method = "cv", number = 5,allowParallel = TRUE,
summaryFunction = auprcSummary,
classProbs = T)
rf_strata = train(xtrain_origin, ytrain_origin, method = "rf",
trControl=control5,
sampsize = c(50,50),
metric = "AUPRC")
control5$sampling = "down"
down_fit = train(income ~., data = train_origin, method = "rf",
verbose = F, metric = "AUPRC",
trControl = control5)
out <- the_curve$auc.integral
class(out)
out
names(out)
