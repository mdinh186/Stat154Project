down_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC", tuneGrid = tunegrid, ntree=200,
trControl = control5)
pred = predict(down_fit, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
pred = predict(up_fit, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
varImp(up_fit)
plot(varImp(up_fit)
)
png(filename="images/Bagged_varImp_up_fit.png")
plot(varImp(up_fit), main = "Top features of bagged tree, upper sample with ROC")
dev.off()
bag_fit_imp = data.frame(feature = rownames(varImp(up_fit)$importance), Score= varImp(up_fit)$importance)
bag_fit_imp = bag_fit_imp[order(bag_fit_imp[,2], decreasing = T),]$feature
top_ten = c(as.character(bag_fit_imp[1:10]), "income")
df_final = df_impute[,..top_ten]
train_final_idx = createDataPartition(df_final$income, p = 0.8)[[1]]
train_final = df_final[train_final_idx,]
test_final = df_final[-train_final_idx, ]
bag_fit_feat = train(train_final[,-c("income")], train_final$income, method = "rf",
verbose = F, metric = "ROC",
trControl = control5, tuneGrid = tunegrid)
pred = predict(bag_fit_feat, test_final[,-c("income")])
confusionMatrix(test_final$income, pred, positive = "More.50k")
old.par <- par(mar = c(0, 0, 0, 0))
par(old.par)
png(filename="Bagged_final_up_ROC.png")
plot.roc(test_origin$income, predict(bag_fit_feat, test_final[,-c("income")], type = "prob")[, "More.50k"],
xlab = "FPR", ylab = "TPR",
main ="Bagged Tree final model, top 10 features \nof upper sample with ROC",
print.auc = T)
dev.off()
top_ten = readRDS("data/toptenfeat.rds")
top_ten
train_origin = readRDS("data/train.RDS")
test_origin = readRDS("data/test.rds")
tree.inc <- tree(formula = income~., data = train_origin)
train_origin
head(train_origin)
library(tree)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
tree.inc <- tree(formula = income~., data = train_origin)
colnames(train_origin)
train_origin <- as.data.frame(train_origin)
test_origin <- as.data.frame(test_origin)
tree.inc <- tree(formula = income~., data = train_origin)
tree.inc <- tree(income~., data = train_origin)
colnames(df_impute)
train_origin <- data.frame(train_origin)
tree.inc <- tree(income~., data = train_origin)
test_origin <- data.frame(test_origin)
summary(tree.inc)
tree.pred <- predict(tree.inc, test_origin, type = 'class')
table(tree.pred, ytest_origin)
(4531 + 622) / sum(table(tree.pred, ytest_origin)) #correct prediction rate is 0.8396806
confusionMatrix(ytest_origin, tree.pred, positive = "More.50k")
cv.inc <- cv.tree(tree.inc, FUN = prune.misclass)
names(cv.inc)
cv.inc
png(filename="decision_cv.png")
old.par <- par( no.readonly = TRUE )
par( oma = c( 0, 0, 3, 0 ), mfrow = c(1,2))
plot(cv.inc$size, cv.inc$dev, type = 'b', main = )
plot(cv.inc$k, cv.inc$dev, type = 'b')
mtext("Examining size and k by dev for cv.tree", outer = TRUE)
dev.off()
plot(cv.inc$size, cv.inc$dev, type = 'b', main = )
plot(cv.inc$k, cv.inc$dev, type = 'b')
mtext("Examining size and k by dev for cv.tree", outer = TRUE)
plot(cv.inc$size, cv.inc$dev, type = 'b', main = )
prune.inc <- prune.misclass(tree.inc, best = 5, newdata = test_origin)
plot(prune.inc)
tree.pred <- predict(prune.inc, test_origin, type = 'class')
table(tree.pred, ytest_origin)
(4531 +622)/sum(table(tree.pred, ytest_origin)) #correct prediction rate is 83.97%
confusionMatrix(ytest_origin, tree.pred, positive = "More.50k")
prune.inc_1 <- prune.misclass(tree.inc, best = 5, newdata = test_origin, k = 220)
plot(prune.inc_1)
text(prune.inc_1, pretty = 0)
varImp(prune.inc)
table(tree.pred_1, ytest_origin)
table(ytest_origin)
255+714
confusionMatrix(ytest_origin, tree.pred, positive = "More.50k")
confusionMatrix(ytest_origin, tree.pred, positive = "More.50k")
table(ytest_origin)
tree.pred <- predict(prune.inc, test_origin, type = 'class')
table(tree.pred, ytest_origin)
413/(413 +4531)
prune.inc_1 <- prune.misclass(tree.inc, best = 5, newdata = test_origin, k = 220)
plot(prune.inc_1)
text(prune.inc_1, pretty = 0)
varImp(prune.inc)
tree.pred_1 <- predict(prune.inc_1, test_origin, type = 'class')
table(tree.pred_1, ytest_origin)
(4573 +613)/sum(table(tree.pred_1, ytest_origin)) #correct prediction rate is now 82.97%
confusionMatrix(ytest_origin, tree.pred_1, positive = "More.50k")
table(ytest_origin)
371/(371+4573)
prune.inc_2 <- prune.misclass(tree.inc, best = 5, newdata = test_origin, k = 375)
plot(prune.inc_2)
text(prune.inc_2, pretty = 0)
tree.pred_2 <- predict(prune.inc_2, test_origin, type = 'class')
confusionMatrix(ytest_origin, tree.pred_2, positive = "More.50k")
302/(302+4642)
confusionMatrix(ytest_origin, tree.pred, positive = "More.50k")
tree.pred <- predict(tree.inc, test_origin, type = 'class')
table(ytest_origin, tree.pred)
plot(cv.inc$k, cv.inc$dev, type = 'b')
cv.inc$k
prune.inc <- prune.misclass(tree.inc, best = 5, newdata = test_origin, k=0)
tree.pred <- predict(prune.inc, test_origin, type = 'class')
table(tree.pred, ytest_origin)
prune.inc_2 <- prune.misclass(tree.inc, best = 5, newdata = test_origin, k = 780)
prune.inc_3 <- prune.misclass(tree.inc, best = 5, newdata = test_origin, k = 780)
plot(prune.inc_3)
text(prune.inc_2, pretty = 0)
text(prune.inc_3, pretty = 0)
tree.pred_3 <- predict(prune.inc_3, test_origin, type = 'class')
confusionMatrix(ytest_origin, tree.pred_3, positive = "More.50k")
library(rpart)
cartModel <- rpart(income ~., train_origin)
cart.pred_1 <- predict(cartModel, test_origin, type = 'class')
confusionMatrix(ytest_origin, cart.pred_1, positive = "More.50k")
413/(413+4531)
cartModel$variable.importance
printcp(cartModel)
0.0093855*0.65630
0.0093855+0.65630
min.xerror <- cartModel$cptable[which.min(cartModel$cptable[,"xerror"]),"CP"]
min.xerror
cartPrune <- prune(cartModel, cp = min.xerror)
cart.pred <- predict(cartPrune, newdata = test_origin, type="class") #Returns the predicted class
cart.pred.prob <- predict(cartPrune, newdata = test_origin, type="prob") #Returns a matrix of predicted probabilities
table(ytest_origin, cart.pred) #exact same as before
plot(prune.inc_2)
text(prune.inc_2)
plotcp(prune.inc_2)
confusionMatrix(ytest_origin, tree.pred_2, positive = "More.50k")
varImp(prune.inc_2)
importance(prune.inc_2)
?importance
?prune.misclass
cartModel <- rpart(income ~., train_origin)
confusionMatrix(ytest_origin, cartModel, positive = "More.50k")
cart.pred_1 <- predict(cartModel, test_origin, type = 'class')
confusionMatrix(ytest_origin, cartModel, positive = "More.50k")
cartModel <- rpart(income ~., train_origin)
cart.pred <- predict(cartModel, test_origin, type = 'class')
confusionMatrix(ytest_origin, cart.pred, positive = "More.50k")
cartModel$variable.importance
printcp(cartModel)
min.xerror <- cartModel$cptable[which.min(cartModel$cptable[,"xerror"]),"CP"]
min.xerror
plotcp(cartModel)
cart.pred.prob <- predict(cartModel, test_origin, type = 'prob')
library(ROCR)
pred_ROC <-prediction((cart.pred.prob[,2]), (ytest_origin))
perf <- performance(pred_ROC, measure = "tpr", x.measure = "fpr")
AUC <- performance(pred_ROC,"auc")
AUC@y.values
png(filename="images/Decision_ROC.png")
plot(perf, main="Decision tree, ROC plot")
abline(coef=c(0,1), col = "grey")
mtext(paste("AUC is", as.character(round(as.numeric(AUC@y.values), 4))))
dev.off()
png(filename = "decision_varimp.png")
par(mar = c(7, 5, 2, 2))
ploting <- cartModel$variable.importance/sum(cartModel$variable.importance)
ploting <- t(ploting)
plotting <- ploting[order(ploting, decreasing = TRUE)]
names(plotting) <- c(colnames(ploting)[order(ploting, decreasing = TRUE)])
barplot(plotting, cex.names  = 0.7,
names.arg=names(ploting), mgp = c(3, 0.5, 0),
main = "Variable Importance for Decision tree", las=2, ylim=c(0, 0.25))
dev.off()
plotting[1:7]
cartModel$variable.importance
library(rpart)
library(randomForest)
library(data.table)
library(caret)
library(doParallel)
library(plotROC)
library(dplyr)
library(purrr)
library(pROC)
library(grid)
library(data.table)
set.seed(123)
train_origin = readRDS("data/train.RDS")
test_origin = readRDS("data/test.rds")
train_origin <- data.frame(train_origin)
test_origin <- data.frame(test_origin)
tunegrid <- expand.grid(.mtry=16)
control = trainControl(method = "cv", number = 5)
rf_default  = train(x = xtrain_origin, y = ytrain_origin,
method = "rf", trControl = control,
importance= T, ntree = 200, tuneGrid = tunegrid, replace= F)
xtrain_origin <- train_origin[,-c("income")]
train_origin = readRDS("data/train.RDS")
xtrain_origin <- train_origin[,-c("income")]
ytrain_origin <- train_origin[,"income"]
xtrain_origin <- train_origin[,-c("income")]
ytrain_origin <- train_origin[,"income"]
xtest_origin <- test_origin[,-c("income")]
ytest_origin <- test_origin[,"income"]
train_origin <- data.frame(train_origin)
test_origin = readRDS("data/test.rds")
xtest_origin <- test_origin[,-c("income")]
ytest_origin <- test_origin[,"income"]
train_origin <- data.frame(train_origin)
test_origin <- data.frame(test_origin)
xtrain_origin <- data.frame(xtrain_origin)
xtest_origin <- data.frame(xtest_origin)
ytrain_origin <- data.frame(ytrain_origin)
ytest_origin <- data.frame(ytest_origin)
tunegrid <- expand.grid(.mtry=16)
ctrol = trainControl(method = "cv", number =5,
verboseIter = F,
sampling = "down")
set.seed(123)
model_rf_under = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol, tuneGrid = tunegrid, ntree=200)
nrow(xtrain_origin)
nrow(ytrain_origin)
model_rf_under = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol, tuneGrid = tunegrid, ntree=200)
ctrol = trainControl(method = "cv", number =5,
verboseIter = F,
sampling = "down")
set.seed(123)
tunegrid <- expand.grid(.mtry=16)
model_rf_under = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol, tuneGrid = tunegrid, ntree=200)
model_rf_under = train(~income., data = train_origin, method = "rf",
trControl = ctrol, tuneGrid = tunegrid, ntree=200)
colnames(train_origin)
xtrain_origin <- train_origin[,-c("income")]
train_origin = readRDS("data/train.RDS")
test_origin = readRDS("data/test.rds")
xtrain_origin <- train_origin[,-c("income")]
ytrain_origin <- train_origin[,"income"]
xtest_origin <- test_origin[,-c("income")]
ytest_origin <- test_origin[,"income"]
model_rf_under = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol, tuneGrid = tunegrid, ntree=200)
ctrol = trainControl(method = "cv", number =5,
verboseIter = F,
sampling = "down")
?train
model_rf_under = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol, tuneGrid = tunegrid, ntree=200)
dim(xtrain_origin)
length(ytrain_origin)
ytrain_origin
class(ytrain_origin)
model_rf_under = train(xtrain_origin, as.vector(ytrain_origin), method = "rf",
trControl = ctrol, tuneGrid = tunegrid, ntree=200)
train_origin = readRDS("data/train.RDS")
test_origin = readRDS("data/test.rds")
xtrain_origin <- train_origin[,-c("income")]
ytrain_origin <- train_origin$income
xtest_origin <- test_origin[,-c("income")]
ytest_origin <- test_origin$income
train_origin <- data.frame(train_origin)
test_origin <- data.frame(test_origin)
xtrain_origin <- data.frame(xtrain_origin)
ytrain_origin <- data.frame(ytrain_origin)
ctrol = trainControl(method = "cv", number =5,
verboseIter = F,
sampling = "down")
set.seed(123)
model_rf_under = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol, tuneGrid = tunegrid, ntree=200)
ytest_origin <- test_origin$income
xtest_origin <- data.frame(xtest_origin)
ytrain_origin <- train_origin$income
model_rf_under = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol, tuneGrid = tunegrid, ntree=200)
pred = predict(model_rf_under, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
cl = makeCluster(detectCores()-1)
registerDoParallel(cl)
model_list1 = list(
down = model_rf_under,
up = model_rf_over)
custom_col = c("#000000", "#009E73")
model_roc_plot(model_list1, custom_col)
model_roc_plot(model_list1, custom_col, AUC = T)
ctrol2 = trainControl(method =  "cv", number =5,
verboseIter = F,
sampling = "up")
model_rf_over = train(xtrain_origin, ytrain_origin, method = "rf",
trControl = ctrol2, tuneGrid = tunegrid, ntree=200)
pred = predict(model_rf_over, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
rf_default  = train(x = xtrain_origin, y = ytrain_origin,
)
rf_default  = train(x = xtrain_origin, y = ytrain_origin,
method = "rf", trControl = control,
control = trainControl(method = "cv", number = 5)
rf_default  = train(x = xtrain_origin, y = ytrain_origin,
method = "rf", trControl = control,
importance= T, ntree = 200, tuneGrid = tunegrid, replace= F)
pred = predict(rf_default, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
rf_default  = train(x = xtrain_origin, y = ytrain_origin,
method = "rf", trControl = control,
importance= T, ntree = 200, tuneGrid = tunegrid, replace= F)
pred = predict(rf_default, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
varImp(rf_default)
plot(varImp(rf_default))
model_list1 = list(original = rf_default,
down = model_rf_under,
up = model_rf_over)
custom_col = c("#000000", "#009E73", "#990022")
model_roc_plot(model_list1, custom_col)
model_roc_plot(model_list1, custom_col, AUC = T)
down_fit = train(xtrain_origin, ytrain_origin, method = "rf",
control5$sampling = "down"
down_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC", tuneGrid = tunegrid, ntree=200,
trControl = control5)
train_origin = readRDS("data/train.RDS")
test_origin = readRDS("data/test.rds")
xtrain_origin <- train_origin[,-c("income")]
ytrain_origin <- train_origin$income
xtest_origin <- test_origin[,-c("income")]
ytest_origin <- test_origin$income
train_origin <- data.frame(train_origin)
test_origin <- data.frame(test_origin)
xtrain_origin <- data.frame(xtrain_origin)
xtest_origin <- data.frame(xtest_origin)
control5$sampling = "down"
down_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC", tuneGrid = tunegrid, ntree=200,
trControl = control5)
control5 = trainControl(method = "cv", number = 5, search = "random",allowParallel = TRUE,
summaryFunction = twoClassSummary,
classProbs = T)
control5$sampling = "down"
down_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC", tuneGrid = tunegrid, ntree=200,
trControl = control5)
pred = predict(down_fit, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
control5$sampling = "up"
up_fit = train(xtrain_origin, ytrain_origin, method = "parRF",
verbose = F, metric = "ROC",  tuneGrid = tunegrid, ntree= 200,
trControl = control5)
pred = predict(up_fit, xtest_origin)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
rf_strata = train(xtrain_origin, ytrain_origin, method = "rf",
tuneGrid = tunegrid, ntree=200, trControl=control5,
strata = ytrain_origin, sampsize = c(50,50),
metric = "ROC")
model_list2 = list(
down = down_fit,
up = up_fit)
custom_col = c("#000000", "#009E73")
model_roc_plot(model_list2, custom_col)
model_roc_plot(model_list2, custom_col, AUC = T)
down_fit
up_fit
model_list2 = list(down = down_fit,
up = up_fit)
custom_col = c("#000000", "#009E73")
model_roc_plot(model_list2, custom_col)
control5$sampling = "up"
up_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",  tuneGrid = tunegrid, ntree= 200,
trControl = control5)
up_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",  tuneGrid = tunegrid, ntree= 200,
trControl = control5)
stopCluster()
stopCluster(cl=NULL)
stopCluster(cl=3)
?stopCluster
stopCluster(cl)
stopCluster(cl=cl)
stopImplicitCluster()
model_roc_plot(model_list2, custom_col, AUC = T)
up_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",  tuneGrid = tunegrid, ntree= 200,
trControl = control5)
registerDoParallel(cl)
up_fit = train(xtrain_origin, ytrain_origin, method = "rf",
verbose = F, metric = "ROC",  tuneGrid = tunegrid, ntree= 200,
trControl = control5)
pred = predict(up_fit, xtest_origin)
up_fit
pred = predict(up_fit, xtest_origin)
xtest_origin
1- 0.7913
model_roc_plot = function(model_list, custom_col, AUC= FALSE){
# Function that takes in different models, calculate the AUC,
# and plot the ROC curve. Return AUC if specified
#   Argument:
#   model_list: list of models (that train on train on train dataset, we can use predict on those models to predict data)
#   custom_col: vector of color for each model. The length of vector should be equal to the length of model
if (length(custom_col) != length(model_list)){
stop("Model list and number of colors to plot must be equal")
}
test_roc <- function(model, data){
#     Cacluate AUC
#
roc(data$income,
predict(model, data, type = "prob")[, "More.50k"])
}
model_list_pr = model_list %>%
map(test_roc, data = test_origin)
results_list_roc <- list(NA)
num_mod <- 1
for(the_roc in model_list_pr){
results_list_roc[[num_mod]] =
data_frame(tpr = the_roc$sensitivities,
fpr = 1 - the_roc$specificities,
model = names(model_list)[num_mod])
num_mod = num_mod + 1
}
results_df_roc =  bind_rows(results_list_roc)
g = ggplot(aes(x = fpr,  y = tpr, group = model), data = results_df_roc) +
geom_line(aes(color = model), size = 1) +
scale_color_manual(values = custom_col) +
geom_abline(intercept = 0, slope = 1, color = "gray", size = 1) +
theme_bw(base_size = 18)
print (g)
if (AUC == T){
area= model_list_pr %>%
map(auc)
return (area)
}
}
model_list2 = list(
down = down_fit,
up = up_fit)
custom_col = c("#000000", "#009E73")
model_roc_plot(model_list2, custom_col)
confusionMatrix(ytest_origin, pred, positive = "More.50k")
confusionMatrix(pred, ytest_origin, positive = "More.50k")
pred = predict(up_fit, xtest_origin)
old.par <- par(mar = c(0, 0, 0, 0))
par(old.par)
png(filename="TEST_Bagged_ROC.png")
pred.prob = predict(bag_fit_feat, data.frame(xactual_test), type = "prob")
plot.roc(yactual_test, pred.prob[, "More.50k"],
xlab = "FPR", ylab = "TPR",
main ="Bagged Tree ROC on Against Test Set",
print.auc = T)
dev.off()
getwd()
plot.roc(yactual_test, pred.prob[, "More.50k"],
xlab = "FPR", ylab = "TPR",
main ="Bagged Tree ROC on Against Test Set",
print.auc = T)
getwd()
library(data.table)
set.seed(123)
train_origin = readRDS("data/train.RDS")
test_origin = readRDS("data/test.rds")
train_origin <- data.table(train_origin)
test_origin <- data.table(test_origin)
xtrain_origin <- train_origin[,-c("income")]
ytrain_origin <- train_origin$income
xtest_origin <- test_origin[,-c("income")]
ytest_origin <- test_origin$income
train_origin <- data.frame(train_origin)
test_origin <- data.frame(test_origin)
xtrain_origin <- data.frame(xtrain_origin)
xtest_origin <- data.frame(xtest_origin)
rf_default
pred = predict(rf_default, xtest_origin)
confusionMatrix(pred, ytest_origin, positive = "More.50k")
598/(598+970)
control5 = trainControl(method = "cv", number = 5, search = "random",allowParallel = TRUE,
summaryFunction = twoClassSummary,
classProbs = T)
rf_strata = train(xtrain_origin, ytrain_origin, method = "rf",
tuneGrid = tunegrid, ntree=200, trControl=control5,
strata = ytrain_origin, sampsize = c(50,50),
metric = "ROC")
df_fault
model_list1 = list(original = rf_default,
down = model_rf_under,
up = model_rf_over)
custom_col = c("#000000", "#009E73", "#990022")
model_roc_plot(model_list1, custom_col)
model_roc_plot(model_list1, custom_col, AUC = T)
model_list2 = list(original = rf_strata,
down = down_fit,
up = up_fit)
control5 = trainControl(method = "cv", number = 5, search = "random",allowParallel = TRUE,
summaryFunction = twoClassSummary,
classProbs = T)
rf_strata = train(xtrain_origin, ytrain_origin, method = "rf",
tuneGrid = tunegrid, ntree=200, trControl=control5,
strata = ytrain_origin, sampsize = c(50,50),
metric = "ROC")
pred = predict(rf_strata, xtest_origin)
confusionMatrix(pred, ytest_origin, positive = "More.50k")
2403/(10032_2403)
2403/(10032+2403)
3210/(3210+616)
3210/(3210+636)
2403/(10032+2303)
10032/(10032+2303)
