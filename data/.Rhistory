train_idx = sample(nrow(df2), n)
train = df2[train_idx,]
test = df2[-train_idx,]
lda_fit = lda(y~., data = train)
post_pred = predict(lda_fit, test)$posterior
#post_pred = apply(post_pred, 1, which.max) -1
pred = prediction(post_pred[,2], test$y)
perf = performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf)
abline(a=0, b= 1)
auc.perf = performance(pred, measure = "auc")
auc.perf@y.values
library(ROCR)
post_pred = predict(lda_fit, test)$posterior
head(post_pred)
library(ggplot2)
library(data.table)
library(kernlab)
library(MASS)
library(ROCR)
set.seed(100)
X1 = c(rnorm(100), rnorm(100, mean = 4))
X2 = c(rnorm(100), rnorm(100, mean = 4))
y = factor(c(rep(0,100), rep(1,100)))
df1 = data.frame(X1, X2, y)
set.seed(200)
r = c(runif(100, 1,2), runif(100, 5,6))
theta = runif(200, 0,2*pi)
X1 = r*cos(theta) + rnorm(200)
X2 = r *sin(theta) + rnorm(200)
y = factor(c(rep(0,100), rep(1,100)))
df2 = data.frame(X1, X2, y)
ggplot(df2, aes(X1, X2)) + geom_point(aes(shape = y))
C_vector = c(0.01, 01, 1,10, 100, 1000, 10000)
dataset_list = list(df1, df2)
for (df in dataset_list){
for (C in C_vector){
fit = ksvm(y~., data = df, kernel = "vanilladot", C = C)
plot(fit, data = df)
}
}
library(data.table)
library(ggplot2)
library(randomForest)
library(ISLR)
attach(Carseats)
install.packages("tree")
High = ifelse(Sales <-8, "No", "Yes")
carseats = data.frame(Carseats, High)
head(carseats)
tree_carseats = tree(High~. -Sales, data = carseats)
library(tree)
tree_carseats = tree(High~. -Sales, data = carseats)
summary(tree_carseats)
plot(tree_carseats)
plot(tree_carseats)
tree_carseats = tree(High ~ .-Sales , data=carseats))
tree_carseats = tree(High ~ .-Sales , data=carseats)
summary(tree_carseats)
plot(tree_carseats)
text(tree_carseats, pretty = 0)
summary(tree_carseats)
tree_carseats
attach(Carseats)
High = ifelse(Sales <= 8, "No", "Yes")
carseats = data.frame(Carseats, High)
plot(tree_carseats)
text(tree_carseats, pretty = 0)
tree_carseats
install.packages("ranger")
nrow(carseats)
n = ceiling(nrow(train_idx) * 0.8)
n = ceiling(nrow(carseats) * 0.8)
train_idx = sample(nrow(train_idx), n)
train_idx = sample(nrow(carseats), n)
install.packages("Parallel")
install.packages("ParallelForest")
library(ParallelForest)
train = carseats[train_idx,]
test = carseats[-train_idx,]
library(ranger)
tree_carseats = tree(High~. - Sales, data = carseats)
plot(tree_carseats)
rf = ranger(High~. - Sales, data = train, write.forest = T)
summary(rf)
rf
pred = predict(rf, data = test)
pred
table(pred$predictions, test$High)
table(test$High)
n = ceiling(nrow(carseats) * 0.8)
train_idx = sample(nrow(carseats), n)
train = carseats[train_idx,]
test = carseats[-train_idx,]
rf = ranger(High~. - Sales, data = train, write.forest = T)
rf
pred = predict(rf, data = test)
table(pred$predictions, test$High)
importance(rf)
rf
rf = ranger(High~. - Sales, data = train, write.forest = T, importance = T)
?ranger
rf = ranger(High~. - Sales, data = train, write.forest = T, importance.mode = T)
rf = ranger(High~. - Sales, data = train, write.forest = T, importance.mode = "impurity")
rf = ranger(High~. - Sales, data = train, write.forest = T)
pred = predict(rf, data = test)
table(pred$predictions, test$High)
importance.ranger(rf)
importance(rf)
rf = ranger(High~. - Sales, data = train,importance = "impurity", write.forest = T)
importance(rf)
rf = randomForest((High~. - Sales, data = train,importance = T)
rf = randomForest(High~. - Sales, data = train,importance = T)
rf = randomForest(High~. - Sales, data = train, importance = T)
rf = randomForest(High~. - Sales, importance = T, data = test)
rf = randomForest(High~. - Sales, importance = T, data = train)
n = ceiling(nrow(carseats) * 0.8)
train_idx = sample(nrow(carseats), n)
train = carseats[train_idx,]
test = carseats[-train_idx,]
rf = randomForest(High~. - Sales, importance = T, data = train)
table(train$High)
attach(Carseats)
High = ifelse(Sales <- 8, "No", "Yes")
carseats = data.frame(Carseats, High)
table(carseats$High)
attach(Carseats)
High = ifelse(Sales <=8, "No", "Yes")
carseats = data.frame(Carseats, High)
tree_carseats = tree(High~. - Sales, data = carseats)
plot(tree_carseats)
table(carseats$High)
Sales
Sales
rm(list=ls())
library(data.table)
library(ggplot2)
library(randomForest)
library(ISLR)
library(tree)
attach(Carseats)
Sales
High = ifelse(Sales <=8, "No", "Yes")
table(High)
carseats = data.frame(Carseats, High)
tree_carseats = tree(High~. - Sales, data = carseats)
table(carseats$High)
plot(tree_carseats)
text(tree_carseats, pretty = 0)
tree_carseats
n = ceiling(nrow(carseats) * 0.8)
train_idx = sample(nrow(carseats), n)
train = carseats[train_idx,]
test = carseats[-train_idx,]
rf = randomForest(High~. - Sales, importance = T, data = train)
rf
pred = predict(rf, data = test)
table(pred$predictions, test$High)
pred
test$High
table(pred$predictions, test$High)
actual = test$High
table(pred$predictions,actual )
actual = test$High
actual = test[,"High"]
table(pred$predictions,actual)
actual = test$High
actual = as.factor(actual)
pred = as.factor(pred)
pred = predict(rf, data = test)
rf = randomForest(High~. - Sales, importance = T, data = train)
rf
## OOB error rate: 19.06%
pred = predict(rf, data = test)
pred
pred = predict(rf, data = test)
table(pred, actual)
pred = predict(rf, data = test)
class(pred)
length(pred)
length(test)
n = ceiling(nrow(carseats) * 0.8)
train_idx = sample(nrow(carseats), n)
train = carseats[train_idx,]
test = carseats[-train_idx,]
rf = randomForest(High~. - Sales, importance = T, data = train)
rf
pred = predict(rf, data = test)
length(pred)
length(test)
dim(test)
n
train = carseats[train_idx,]
test = carseats[-train_idx,]
n = ceiling(nrow(carseats) * 0.8)
train_idx = sample(nrow(carseats), n)
train = carseats[train_idx,]
test = carseats[-train_idx,]
dim(test)
rf = randomForest(High~. - Sales, importance = T, data = train)
rf
pred = predict(rf, data = test)
actual = test$High
dim(pred)
length(pred)
pred = predict(rf, newdata = test)
pred
length(pred)
table(pred, actual)
t = table(pred, actual)
error_rate = 1 - sum(diag(t))/nrow(test)
error_rate
importance(rf)
rf$importance
detach(ranger)
detach("package:ranger", unload=TRUE)
importance(rf)
varImpPlot(rf)
library(gbm)
install.packages(gbm)
install.packages("gbm")
library(gbm)
?gbm
boosted_tree = gbm(High~. - Sales, data = train, n.trees = 5000)
library(gbm)
install.packages("gbm")
install.packages("gbm")
library(gbm)
boosted_tree = gbm(High~. - Sales, data = train, n.trees = 5000)
library(gbm)
install.packages("gbm")
install.packages("gbm")
library(gbm)
version
library(gbm)
install.packages("gbm")
install.packages("gbm")
library("gbm")
library("gbm")
library("gbm")
gb
gbm
boosted_tree = gbm(High~. - Sales, data = train, n.trees = 5000)
boosted_tree = gbm(High~. - Sales, data = train, n.trees = 5000, distribution = "bernoulli")
carseats$High = as.numeric(carseats$High)
levels(carseats$High)
unique(carseats$High)
n = ceiling(nrow(carseats) * 0.8)
train_idx = sample(nrow(carseats), n)
train = carseats[train_idx,]
test = carseats[-train_idx,]
rf = randomForest(High~. - Sales, importance = T, data = train)
library(data.table)
library(ggplot2)
library(randomForest)
library(ISLR)
library(tree)
library(gbm)
n = ceiling(nrow(carseats) * 0.8)
train_idx = sample(nrow(carseats), n)
train = carseats[train_idx,]
test = carseats[-train_idx,]
rf = randomForest(High~. - Sales, importance = T, data = train)
rf
## OOB error rate: 19.06%
pred = predict(rf, newdata = test)
t = table(pred, actual)
error_rate = 1 - sum(diag(t))/nrow(test)
error_rate
importance(rf)
varImpPlot(rf)
### price and shelveloc are the most importance one
carseats$High = as.numeric(carseats$High) - 1
boosted_tree = gbm(High~. - Sales, data = train, n.trees = 5000, distribution = "bernoulli")
train = carseats[train_idx,]
test = carseats[-train_idx,]
boosted_tree = gbm(High~. - Sales, data = train, n.trees = 5000, distribution = "bernoulli")
boosted_tree
summary(boosted_tree)
boosted_tree$fit
boosted_tree$num.classes
predict(boosted_tree, newdata = train)
predict(boosted_tree, newdata = train, n.trees =  5000)
predict(boosted_tree, newdata = train, n.trees =  5000, type = "response")
predict(boosted_tree, newdata = test, n.trees =  5000, type = "response")
pred = predict(boosted_tree, newdata = test, n.trees =  5000, type = "response")
pred = ifelse(pred >= 0.5, 1, 0)
cf_mat = table(pred, test$High)
error_rate = 1 - sum(diag(cf_mat))/nrow(test)
error_rate
b = seq(10, 5000,10)
b
pred = predict(boosted_tree, newdata = test, n.trees =  i, type = "response")
i = b[1]
pred = predict(boosted_tree, newdata = test, n.trees =  i, type = "response")
error_rate_list = rep(NA, length(b))
b = seq(10, 5000,10)
b
error_rate_list = rep(NA, length(b))
for (i in 1:length(b)){
pred = predict(boosted_tree, newdata = test, n.trees =  b[i], type = "response")
pred = ifelse(pred >= 0.5, 1, 0)
cf_mat = table(pred, test$High)
error_rate = 1 - sum(diag(cf_mat))/nrow(test)
error_rate_list[i] = error_rate
}
df_plot = data.frame(NbTrees = b, Error.Rate = error_rate_list)
plot(df_plot)
plot(df_plot, type= "l")
d = seq(1,4,1)
error_matrix = matrix(NA, nrow =length(b), ncol = length(d))
d
d = seq(1,4,1)
error_matrix = matrix(NA, nrow =length(b), ncol = length(d))
for(j in 1:length(d)){
for (i in 1:length(b)){
pred = predict(boosted_tree, newdata = test, n.trees =  b[i], type = "response")
pred = ifelse(pred >= 0.5, 1, 0)
cf_mat = table(pred, test$High)
error_rate = 1 - sum(diag(cf_mat))/nrow(test)
error_matrix[i,j] = error_rate
}
}
dim(error_matrix)
d = seq(1,4,1)
error_matrix = matrix(NA, nrow =length(b), ncol = length(d))
for(j in 1:length(d)){
for (i in 1:length(b)){
pred = predict(boosted_tree, newdata = test, n.trees =  b[i], type = "response", interaction.depth =d[j])
pred = ifelse(pred >= 0.5, 1, 0)
cf_mat = table(pred, test$High)
error_rate = 1 - sum(diag(cf_mat))/nrow(test)
error_matrix[i,j] = error_rate
}
}
error_matrix = data.frame(error_matrix)
dim(error_matrix)
names(error_matrix)
colnames(error_matrix) = paste0("depth", 1:4)
par(mfrow = c(2,2))
for(i in 1:4){
plot(error_matrix[,i], type = "l")
}
rm(list = ls())
dir = "Downloads/Stat154/Projects/data"
setwd(dir)
df  = read.table("adult.data")
str(df)
summary(df)
View(df)
?randomForest
df  = read.table("adult.data", sep = ",")
summary(df)
View(df)
table(df$V15)
str(df)
View(df)
sapply(df, function(x) sum(is.na(x)))
sum(df$V14 == "?")
df$V14 == "?"
unique(df$V14)
sum("?" %in% df$V14)
"?" %in% df$V14
? %in% df$V14
is.element("?", df$V14)
is.factor("?", df$V14)
str(df)
class(df)
factor_vect = c(2, 4, 6:10, 14)
library(data.table)
df_copy = df.copy()
df_copy = cbind(df)
df_copy = data.table(df_copy)
factor_vect = paste0(V, c(2, 4, 6:10, 14))
factor_vect = paste0("V", c(2, 4, 6:10, 14))
df_copy[,(factor_vect) := lapply(.SD, function(x) as.character(x)), .SDcols = factor_vect]
colnames(df_copy)
str(df_copy)
"?" %in% df_copy$V14
unique(df_copy$V14)
" ?" %in% df_copy$V14
sum(df_copy$V14[" ?" %in% df_copy$V14])
sum(df_copy$V14[df$V14 == " ?"])
table(df$V14)
table(df$V14)[1]
sappy(df, function(x) table(x)[1])
sapply(df, function(x) table(x)[1])
class(df)
df = data.table(df)
sapply(df[, ..factor_vec], function(x) table(x)[1])
factor_vect = paste0("V", c(2, 4, 6:10, 14))
factor_vect
t= df[,..factor_vect]
df_fac = df[,..factor_vect]
sapply(df_fac, function(x) table(x)[1])
str(df_fac)
boxplot(df)
str(df)
df_cont = df[, c(1,3, 5, 11:13)]
boxplot(df_cont)
library(ggforce)
library(GGally)
ggpairs(df_cont)
ggpairs(df_cont)
df_transform = cbind(df)
plot(log(df_transform$V1))
plot(log(df_transform$V1), type = "d")
plot(log(df_transform$V1), type = "density")
densityplot(log(df_transform$V1))
par(mfrow= c(3,2))
densityplot(log(df_transform$V1))
densityplot(log(df_transform$V2))
densityplot(log(df_transform$V2))
range(df_transform$V2)
densityplot(log(df_transform$V3)) # doesn't work
densityplot(sqrt(df_transform$V3)) # doesn't work
v1_trans = log(df_transform$V1)
densityplot(v1_trans)# it works
qqplot(v1_trans)
?qqplot
qqplot(v1_trans, dist = "norm")
v1_trans = log(df_transform$V1)
qqplot(v1_trans, dist = "norm")
plot(density(v1_trans))
library(MASS)
qqPlot(v1_trans, dist = "norm")
library(car)
qqPlot(v1_trans, dist = "norm")
qqPlot(v1_trans, dist = "norm", col = palette()[1], pch = 19)
qqPlot(v1_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v1_trans)$p.value), pch = 19)
library(nortest)
qqPlot(v1_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v1_trans)$p.value), pch = 19)
v3_trans = log(df_transform$V3)
v3_trans = log(df_transform$V3)
densityplot(log(v3_trans)) # doesn't work
qqPlot(v3_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v3_trans)$p.value), pch = 19)
densityplot(log(v3_trans)) # doesn't work
plot(density(v3_trans))# doesn't work
qqPlot(v3_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v3_trans)$p.value), pch = 19)
par(mfrow= c(2,6))
## try log transform for V1
v1_trans = log(df_transform$V1)
plot(density(v1_trans))
### qqplot with normality test
qqPlot(v1_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v1_trans)$p.value), pch = 19)
v3_trans = log(df_transform$V3)
plot(density(v3_trans))# doesn't work
qqPlot(v3_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v3_trans)$p.value), pch = 19)
par(mfrow= c(6,2))
## try log transform for V1
v1_trans = log(df_transform$V1)
plot(density(v1_trans))
v1_trans = log(df_transform$V1)
plot(density(v1_trans))
### qqplot with normality test
qqPlot(v1_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v1_trans)$p.value), pch = 19)
v3_trans = log(df_transform$V3)
plot(density(v3_trans))# doesn't work
qqPlot(v3_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v3_trans)$p.value), pch = 19)
qqPlot(v1_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v1_trans)$p.value), pch = 19)
qqPlot(v3_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v3_trans)$p.value), pch = 19)
v5_trans = log(df_transform$V5)
plot(density(v5_trans))
v5_trans = log(df_transform$V5)
plot(density(v5_trans))
qqPlot(v5_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v5_trans)$p.value), pch = 19)
ad.test(v5_trans)
plot(density(v5_trans))
v5_tran= sqrt(df_transform$V5)
v5_trans= sqrt(df_transform$V5)
plot(density(v5_trans))
qqPlot(v5_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v5_trans)$p.value), pch = 19)
v13_trans = log(df_transform$V13)
plot(density(v13_trans))
qqPlot(v13_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v13_trans)$p.value), pch = 19)
plot(density(df$V13))
plot(density(df$V13))
qqPlot(df$V13, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(df$V13)$p.value), pch = 19)
v11_trans = log(df_transform$V11)
plot(density(v11_trans))
qqPlot(v11_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v11_trans)$p.value), pch = 19)
v11_trans = log(df_transform$V11)
plot(density(v11_trans))
qqPlot(v11_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v11_trans)$p.value), pch = 19)
range(v11_trans)
range(df$V11)
hist(df$V11)
table(df$V11)
View(df)
ihs = function(x){
y = log(x + sqrt(x^2+1))
return (y)
}
v11_trans = log(df_transform$V11)
plot(density(v11_trans))
qqPlot(v11_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v11_trans)$p.value), pch = 19)
v11_trans = ihs(df_transform$V11)
plot(density(v11_trans))
qqPlot(v11_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v11_trans)$p.value), pch = 19)
plot(density(df$V11))
v11_trans = ihs(df_transform$V11)
plot(density(v11_trans))
qqPlot(v11_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v11_trans)$p.value), pch = 19)
qqPlot(c, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(df$V11)$p.value), pch = 19)
qqPlot(df$V11, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(df$V11)$p.value), pch = 19)
v11_trans = ihs(df_transform$V11)
plot(density(v11_trans))
qqPlot(v11_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v11_trans)$p.value), pch = 19)
v12_trans = ihs(df_transform$V12)
plot(density(v12_trans))
qqPlot(v12_trans, dist= "norm", col=palette()[1],xlab = paste0("Ad-test p-value: ", ad.test(v12_trans)$p.value), pch = 19)
library(MASS)
